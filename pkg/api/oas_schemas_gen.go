// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
)

type GetMultiplayersSummaryPlayersOrder string

const (
	GetMultiplayersSummaryPlayersOrderAsc  GetMultiplayersSummaryPlayersOrder = "asc"
	GetMultiplayersSummaryPlayersOrderDesc GetMultiplayersSummaryPlayersOrder = "desc"
)

// AllValues returns all GetMultiplayersSummaryPlayersOrder values.
func (GetMultiplayersSummaryPlayersOrder) AllValues() []GetMultiplayersSummaryPlayersOrder {
	return []GetMultiplayersSummaryPlayersOrder{
		GetMultiplayersSummaryPlayersOrderAsc,
		GetMultiplayersSummaryPlayersOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetMultiplayersSummaryPlayersOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetMultiplayersSummaryPlayersOrderAsc:
		return []byte(s), nil
	case GetMultiplayersSummaryPlayersOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetMultiplayersSummaryPlayersOrder) UnmarshalText(data []byte) error {
	switch GetMultiplayersSummaryPlayersOrder(data) {
	case GetMultiplayersSummaryPlayersOrderAsc:
		*s = GetMultiplayersSummaryPlayersOrderAsc
		return nil
	case GetMultiplayersSummaryPlayersOrderDesc:
		*s = GetMultiplayersSummaryPlayersOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetServerByIDNotFound is response for GetServerByID operation.
type GetServerByIDNotFound struct{}

func (*GetServerByIDNotFound) getServerByIDRes() {}

type GetServerByIDOK struct {
	Name        string      `json:"name"`
	URL         OptString   `json:"url"`
	Gamemode    OptString   `json:"gamemode"`
	Lang        OptString   `json:"lang"`
	Players     OptInt64    `json:"players"`
	CollectedAt OptDateTime `json:"collected_at"`
}

// GetName returns the value of Name.
func (s *GetServerByIDOK) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *GetServerByIDOK) GetURL() OptString {
	return s.URL
}

// GetGamemode returns the value of Gamemode.
func (s *GetServerByIDOK) GetGamemode() OptString {
	return s.Gamemode
}

// GetLang returns the value of Lang.
func (s *GetServerByIDOK) GetLang() OptString {
	return s.Lang
}

// GetPlayers returns the value of Players.
func (s *GetServerByIDOK) GetPlayers() OptInt64 {
	return s.Players
}

// GetCollectedAt returns the value of CollectedAt.
func (s *GetServerByIDOK) GetCollectedAt() OptDateTime {
	return s.CollectedAt
}

// SetName sets the value of Name.
func (s *GetServerByIDOK) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *GetServerByIDOK) SetURL(val OptString) {
	s.URL = val
}

// SetGamemode sets the value of Gamemode.
func (s *GetServerByIDOK) SetGamemode(val OptString) {
	s.Gamemode = val
}

// SetLang sets the value of Lang.
func (s *GetServerByIDOK) SetLang(val OptString) {
	s.Lang = val
}

// SetPlayers sets the value of Players.
func (s *GetServerByIDOK) SetPlayers(val OptInt64) {
	s.Players = val
}

// SetCollectedAt sets the value of CollectedAt.
func (s *GetServerByIDOK) SetCollectedAt(val OptDateTime) {
	s.CollectedAt = val
}

func (*GetServerByIDOK) getServerByIDRes() {}

// GetServerStatisticsByIDNotFound is response for GetServerStatisticsByID operation.
type GetServerStatisticsByIDNotFound struct{}

func (*GetServerStatisticsByIDNotFound) getServerStatisticsByIDRes() {}

type GetServerStatisticsByIDOKApplicationJSON []ServerStatistic

func (*GetServerStatisticsByIDOKApplicationJSON) getServerStatisticsByIDRes() {}

type GetServerStatisticsByIDPrecision string

const (
	GetServerStatisticsByIDPrecisionPerHour GetServerStatisticsByIDPrecision = "perHour"
	GetServerStatisticsByIDPrecisionPerDay  GetServerStatisticsByIDPrecision = "perDay"
)

// AllValues returns all GetServerStatisticsByIDPrecision values.
func (GetServerStatisticsByIDPrecision) AllValues() []GetServerStatisticsByIDPrecision {
	return []GetServerStatisticsByIDPrecision{
		GetServerStatisticsByIDPrecisionPerHour,
		GetServerStatisticsByIDPrecisionPerDay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServerStatisticsByIDPrecision) MarshalText() ([]byte, error) {
	switch s {
	case GetServerStatisticsByIDPrecisionPerHour:
		return []byte(s), nil
	case GetServerStatisticsByIDPrecisionPerDay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerStatisticsByIDPrecision) UnmarshalText(data []byte) error {
	switch GetServerStatisticsByIDPrecision(data) {
	case GetServerStatisticsByIDPrecisionPerHour:
		*s = GetServerStatisticsByIDPrecisionPerHour
		return nil
	case GetServerStatisticsByIDPrecisionPerDay:
		*s = GetServerStatisticsByIDPrecisionPerDay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServerStatisticsByIDTimeOrder string

const (
	GetServerStatisticsByIDTimeOrderAsc  GetServerStatisticsByIDTimeOrder = "asc"
	GetServerStatisticsByIDTimeOrderDesc GetServerStatisticsByIDTimeOrder = "desc"
)

// AllValues returns all GetServerStatisticsByIDTimeOrder values.
func (GetServerStatisticsByIDTimeOrder) AllValues() []GetServerStatisticsByIDTimeOrder {
	return []GetServerStatisticsByIDTimeOrder{
		GetServerStatisticsByIDTimeOrderAsc,
		GetServerStatisticsByIDTimeOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServerStatisticsByIDTimeOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetServerStatisticsByIDTimeOrderAsc:
		return []byte(s), nil
	case GetServerStatisticsByIDTimeOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerStatisticsByIDTimeOrder) UnmarshalText(data []byte) error {
	switch GetServerStatisticsByIDTimeOrder(data) {
	case GetServerStatisticsByIDTimeOrderAsc:
		*s = GetServerStatisticsByIDTimeOrderAsc
		return nil
	case GetServerStatisticsByIDTimeOrderDesc:
		*s = GetServerStatisticsByIDTimeOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetServersByMultiplayerNotFound is response for GetServersByMultiplayer operation.
type GetServersByMultiplayerNotFound struct{}

func (*GetServersByMultiplayerNotFound) getServersByMultiplayerRes() {}

type GetServersByMultiplayerOKApplicationJSON []ServerSummary

func (*GetServersByMultiplayerOKApplicationJSON) getServersByMultiplayerRes() {}

type GetServersByMultiplayerPlayersOrder string

const (
	GetServersByMultiplayerPlayersOrderAsc  GetServersByMultiplayerPlayersOrder = "asc"
	GetServersByMultiplayerPlayersOrderDesc GetServersByMultiplayerPlayersOrder = "desc"
)

// AllValues returns all GetServersByMultiplayerPlayersOrder values.
func (GetServersByMultiplayerPlayersOrder) AllValues() []GetServersByMultiplayerPlayersOrder {
	return []GetServersByMultiplayerPlayersOrder{
		GetServersByMultiplayerPlayersOrderAsc,
		GetServersByMultiplayerPlayersOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServersByMultiplayerPlayersOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetServersByMultiplayerPlayersOrderAsc:
		return []byte(s), nil
	case GetServersByMultiplayerPlayersOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServersByMultiplayerPlayersOrder) UnmarshalText(data []byte) error {
	switch GetServersByMultiplayerPlayersOrder(data) {
	case GetServersByMultiplayerPlayersOrderAsc:
		*s = GetServersByMultiplayerPlayersOrderAsc
		return nil
	case GetServersByMultiplayerPlayersOrderDesc:
		*s = GetServersByMultiplayerPlayersOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MultiplayerSummary
type MultiplayerSummary struct {
	// Name of a multiplayer.
	Name    string `json:"name"`
	Players int64  `json:"players"`
}

// GetName returns the value of Name.
func (s *MultiplayerSummary) GetName() string {
	return s.Name
}

// GetPlayers returns the value of Players.
func (s *MultiplayerSummary) GetPlayers() int64 {
	return s.Players
}

// SetName sets the value of Name.
func (s *MultiplayerSummary) SetName(val string) {
	s.Name = val
}

// SetPlayers sets the value of Players.
func (s *MultiplayerSummary) SetPlayers(val int64) {
	s.Players = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMultiplayersSummaryPlayersOrder returns new OptGetMultiplayersSummaryPlayersOrder with value set to v.
func NewOptGetMultiplayersSummaryPlayersOrder(v GetMultiplayersSummaryPlayersOrder) OptGetMultiplayersSummaryPlayersOrder {
	return OptGetMultiplayersSummaryPlayersOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetMultiplayersSummaryPlayersOrder is optional GetMultiplayersSummaryPlayersOrder.
type OptGetMultiplayersSummaryPlayersOrder struct {
	Value GetMultiplayersSummaryPlayersOrder
	Set   bool
}

// IsSet returns true if OptGetMultiplayersSummaryPlayersOrder was set.
func (o OptGetMultiplayersSummaryPlayersOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMultiplayersSummaryPlayersOrder) Reset() {
	var v GetMultiplayersSummaryPlayersOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMultiplayersSummaryPlayersOrder) SetTo(v GetMultiplayersSummaryPlayersOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMultiplayersSummaryPlayersOrder) Get() (v GetMultiplayersSummaryPlayersOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMultiplayersSummaryPlayersOrder) Or(d GetMultiplayersSummaryPlayersOrder) GetMultiplayersSummaryPlayersOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerStatisticsByIDPrecision returns new OptGetServerStatisticsByIDPrecision with value set to v.
func NewOptGetServerStatisticsByIDPrecision(v GetServerStatisticsByIDPrecision) OptGetServerStatisticsByIDPrecision {
	return OptGetServerStatisticsByIDPrecision{
		Value: v,
		Set:   true,
	}
}

// OptGetServerStatisticsByIDPrecision is optional GetServerStatisticsByIDPrecision.
type OptGetServerStatisticsByIDPrecision struct {
	Value GetServerStatisticsByIDPrecision
	Set   bool
}

// IsSet returns true if OptGetServerStatisticsByIDPrecision was set.
func (o OptGetServerStatisticsByIDPrecision) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerStatisticsByIDPrecision) Reset() {
	var v GetServerStatisticsByIDPrecision
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerStatisticsByIDPrecision) SetTo(v GetServerStatisticsByIDPrecision) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerStatisticsByIDPrecision) Get() (v GetServerStatisticsByIDPrecision, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerStatisticsByIDPrecision) Or(d GetServerStatisticsByIDPrecision) GetServerStatisticsByIDPrecision {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerStatisticsByIDTimeOrder returns new OptGetServerStatisticsByIDTimeOrder with value set to v.
func NewOptGetServerStatisticsByIDTimeOrder(v GetServerStatisticsByIDTimeOrder) OptGetServerStatisticsByIDTimeOrder {
	return OptGetServerStatisticsByIDTimeOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetServerStatisticsByIDTimeOrder is optional GetServerStatisticsByIDTimeOrder.
type OptGetServerStatisticsByIDTimeOrder struct {
	Value GetServerStatisticsByIDTimeOrder
	Set   bool
}

// IsSet returns true if OptGetServerStatisticsByIDTimeOrder was set.
func (o OptGetServerStatisticsByIDTimeOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerStatisticsByIDTimeOrder) Reset() {
	var v GetServerStatisticsByIDTimeOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerStatisticsByIDTimeOrder) SetTo(v GetServerStatisticsByIDTimeOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerStatisticsByIDTimeOrder) Get() (v GetServerStatisticsByIDTimeOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerStatisticsByIDTimeOrder) Or(d GetServerStatisticsByIDTimeOrder) GetServerStatisticsByIDTimeOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServersByMultiplayerPlayersOrder returns new OptGetServersByMultiplayerPlayersOrder with value set to v.
func NewOptGetServersByMultiplayerPlayersOrder(v GetServersByMultiplayerPlayersOrder) OptGetServersByMultiplayerPlayersOrder {
	return OptGetServersByMultiplayerPlayersOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetServersByMultiplayerPlayersOrder is optional GetServersByMultiplayerPlayersOrder.
type OptGetServersByMultiplayerPlayersOrder struct {
	Value GetServersByMultiplayerPlayersOrder
	Set   bool
}

// IsSet returns true if OptGetServersByMultiplayerPlayersOrder was set.
func (o OptGetServersByMultiplayerPlayersOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServersByMultiplayerPlayersOrder) Reset() {
	var v GetServersByMultiplayerPlayersOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServersByMultiplayerPlayersOrder) SetTo(v GetServersByMultiplayerPlayersOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServersByMultiplayerPlayersOrder) Get() (v GetServersByMultiplayerPlayersOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServersByMultiplayerPlayersOrder) Or(d GetServersByMultiplayerPlayersOrder) GetServersByMultiplayerPlayersOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ServerStatistic
type ServerStatistic struct {
	Timestamp time.Time `json:"timestamp"`
	Players   int32     `json:"players"`
}

// GetTimestamp returns the value of Timestamp.
func (s *ServerStatistic) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetPlayers returns the value of Players.
func (s *ServerStatistic) GetPlayers() int32 {
	return s.Players
}

// SetTimestamp sets the value of Timestamp.
func (s *ServerStatistic) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetPlayers sets the value of Players.
func (s *ServerStatistic) SetPlayers(val int32) {
	s.Players = val
}

// Ref: #/components/schemas/ServerSummary
type ServerSummary struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Players int32  `json:"players"`
}

// GetID returns the value of ID.
func (s *ServerSummary) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ServerSummary) GetName() string {
	return s.Name
}

// GetPlayers returns the value of Players.
func (s *ServerSummary) GetPlayers() int32 {
	return s.Players
}

// SetID sets the value of ID.
func (s *ServerSummary) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ServerSummary) SetName(val string) {
	s.Name = val
}

// SetPlayers sets the value of Players.
func (s *ServerSummary) SetPlayers(val int32) {
	s.Players = val
}
