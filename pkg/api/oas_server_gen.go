// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetServer implements getServer operation.
	//
	// Get server by ID.
	//
	// GET /multiplayer/{multiplayerName}/server/{serverID}
	GetServer(ctx context.Context, params GetServerParams) (GetServerRes, error)
	// ListMultiplayerSummaries implements listMultiplayerSummaries operation.
	//
	// Get a summary of multiplayer platforms.
	//
	// GET /multiplayers/summaries
	ListMultiplayerSummaries(ctx context.Context, params ListMultiplayerSummariesParams) ([]MultiplayerSummary, error)
	// ListServerStatistics implements listServerStatistics operation.
	//
	// Get server statistics by ID.
	//
	// GET /multiplayer/{multiplayerName}/server/{serverID}/statistics
	ListServerStatistics(ctx context.Context, params ListServerStatisticsParams) (ListServerStatisticsRes, error)
	// ListServerSummaries implements listServerSummaries operation.
	//
	// List servers for a multiplayer platform.
	//
	// GET /multiplayer/{multiplayerName}/servers
	ListServerSummaries(ctx context.Context, params ListServerSummariesParams) (ListServerSummariesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
