// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetMultiplayersSummaryParams is parameters of getMultiplayersSummary operation.
type GetMultiplayersSummaryParams struct {
	// Sort order by current players.
	PlayersOrder OptGetMultiplayersSummaryPlayersOrder
}

func unpackGetMultiplayersSummaryParams(packed middleware.Parameters) (params GetMultiplayersSummaryParams) {
	{
		key := middleware.ParameterKey{
			Name: "playersOrder",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayersOrder = v.(OptGetMultiplayersSummaryPlayersOrder)
		}
	}
	return params
}

func decodeGetMultiplayersSummaryParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMultiplayersSummaryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: playersOrder.
	{
		val := GetMultiplayersSummaryPlayersOrder("desc")
		params.PlayersOrder.SetTo(val)
	}
	// Decode query: playersOrder.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playersOrder",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayersOrderVal GetMultiplayersSummaryPlayersOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPlayersOrderVal = GetMultiplayersSummaryPlayersOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.PlayersOrder.SetTo(paramsDotPlayersOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PlayersOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playersOrder",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetServerByIDParams is parameters of getServerByID operation.
type GetServerByIDParams struct {
	// Name of a multiplayer.
	MultiplayerName string
	// ID of a server.
	ServerID string
}

func unpackGetServerByIDParams(packed middleware.Parameters) (params GetServerByIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "serverID",
			In:   "path",
		}
		params.ServerID = packed[key].(string)
	}
	return params
}

func decodeGetServerByIDParams(args [2]string, argsEscaped bool, r *http.Request) (params GetServerByIDParams, _ error) {
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: serverID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "serverID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "serverID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetServerStatisticsByIDParams is parameters of getServerStatisticsByID operation.
type GetServerStatisticsByIDParams struct {
	// Name of a multiplayer.
	MultiplayerName string
	// ID of a server.
	ServerID string
	// Count of return stats.
	Count OptInt32
	// Show stats after last seen.
	LastSeen OptDateTime
	// Sort order by timestamp.
	TimeOrder OptGetServerStatisticsByIDTimeOrder
	// Output precision.
	Precision OptGetServerStatisticsByIDPrecision
}

func unpackGetServerStatisticsByIDParams(packed middleware.Parameters) (params GetServerStatisticsByIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "serverID",
			In:   "path",
		}
		params.ServerID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "lastSeen",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LastSeen = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "timeOrder",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TimeOrder = v.(OptGetServerStatisticsByIDTimeOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "precision",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Precision = v.(OptGetServerStatisticsByIDPrecision)
		}
	}
	return params
}

func decodeGetServerStatisticsByIDParams(args [2]string, argsEscaped bool, r *http.Request) (params GetServerStatisticsByIDParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: serverID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "serverID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "serverID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: count.
	{
		val := int32(720)
		params.Count.SetTo(val)
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Count.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           720,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: lastSeen.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lastSeen",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastSeenVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotLastSeenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastSeen.SetTo(paramsDotLastSeenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lastSeen",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: timeOrder.
	{
		val := GetServerStatisticsByIDTimeOrder("desc")
		params.TimeOrder.SetTo(val)
	}
	// Decode query: timeOrder.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeOrder",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeOrderVal GetServerStatisticsByIDTimeOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTimeOrderVal = GetServerStatisticsByIDTimeOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.TimeOrder.SetTo(paramsDotTimeOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.TimeOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeOrder",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: precision.
	{
		val := GetServerStatisticsByIDPrecision("perHour")
		params.Precision.SetTo(val)
	}
	// Decode query: precision.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "precision",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrecisionVal GetServerStatisticsByIDPrecision
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrecisionVal = GetServerStatisticsByIDPrecision(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Precision.SetTo(paramsDotPrecisionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Precision.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "precision",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetServersByMultiplayerParams is parameters of getServersByMultiplayer operation.
type GetServersByMultiplayerParams struct {
	// Name of a multiplayer.
	MultiplayerName string
	// Sort order by players.
	PlayersOrder OptGetServersByMultiplayerPlayersOrder
	// Count of return servers, -1 for all.
	Count OptInt32
	// Include offline servers or no.
	IncludeOffline OptBool
}

func unpackGetServersByMultiplayerParams(packed middleware.Parameters) (params GetServersByMultiplayerParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "playersOrder",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayersOrder = v.(OptGetServersByMultiplayerPlayersOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "includeOffline",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeOffline = v.(OptBool)
		}
	}
	return params
}

func decodeGetServersByMultiplayerParams(args [1]string, argsEscaped bool, r *http.Request) (params GetServersByMultiplayerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: playersOrder.
	{
		val := GetServersByMultiplayerPlayersOrder("desc")
		params.PlayersOrder.SetTo(val)
	}
	// Decode query: playersOrder.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playersOrder",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayersOrderVal GetServersByMultiplayerPlayersOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPlayersOrderVal = GetServersByMultiplayerPlayersOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.PlayersOrder.SetTo(paramsDotPlayersOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PlayersOrder.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playersOrder",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: count.
	{
		val := int32(-1)
		params.Count.SetTo(val)
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: includeOffline.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "includeOffline",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeOfflineVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeOfflineVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeOffline.SetTo(paramsDotIncludeOfflineVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "includeOffline",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
