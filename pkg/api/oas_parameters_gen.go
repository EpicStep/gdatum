// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetServerParams is parameters of getServer operation.
type GetServerParams struct {
	// Multiplayer platform name.
	MultiplayerName string
	// Server ID.
	ServerID string
}

func unpackGetServerParams(packed middleware.Parameters) (params GetServerParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "serverID",
			In:   "path",
		}
		params.ServerID = packed[key].(string)
	}
	return params
}

func decodeGetServerParams(args [2]string, argsEscaped bool, r *http.Request) (params GetServerParams, _ error) {
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: serverID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "serverID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "serverID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListMultiplayerSummariesParams is parameters of listMultiplayerSummaries operation.
type ListMultiplayerSummariesParams struct {
	// Sort order by current players count.
	PlayersOrderAsc OptBool `json:",omitempty,omitzero"`
}

func unpackListMultiplayerSummariesParams(packed middleware.Parameters) (params ListMultiplayerSummariesParams) {
	{
		key := middleware.ParameterKey{
			Name: "playersOrderAsc",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayersOrderAsc = v.(OptBool)
		}
	}
	return params
}

func decodeListMultiplayerSummariesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListMultiplayerSummariesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: playersOrderAsc.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playersOrderAsc",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayersOrderAscVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotPlayersOrderAscVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PlayersOrderAsc.SetTo(paramsDotPlayersOrderAscVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playersOrderAsc",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListServerStatisticsParams is parameters of listServerStatistics operation.
type ListServerStatisticsParams struct {
	// Multiplayer platform name.
	MultiplayerName string
	// Server ID.
	ServerID string
	// Start of the time range.
	From time.Time
	// End of the time range.
	To time.Time
	// Output precision.
	Precision OptListServerStatisticsPrecision `json:",omitempty,omitzero"`
}

func unpackListServerStatisticsParams(packed middleware.Parameters) (params ListServerStatisticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "serverID",
			In:   "path",
		}
		params.ServerID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		params.From = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		params.To = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "precision",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Precision = v.(OptListServerStatisticsPrecision)
		}
	}
	return params
}

func decodeListServerStatisticsParams(args [2]string, argsEscaped bool, r *http.Request) (params ListServerStatisticsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: serverID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "serverID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "serverID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.From = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.To = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: precision.
	{
		val := ListServerStatisticsPrecision("perHour")
		params.Precision.SetTo(val)
	}
	// Decode query: precision.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "precision",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrecisionVal ListServerStatisticsPrecision
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrecisionVal = ListServerStatisticsPrecision(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Precision.SetTo(paramsDotPrecisionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Precision.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "precision",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListServerSummariesParams is parameters of listServerSummaries operation.
type ListServerSummariesParams struct {
	// Multiplayer platform name.
	MultiplayerName string
	// Sort order by players count.
	PlayersOrderAsc OptBool `json:",omitempty,omitzero"`
	// Maximum number of items to return in the response. Used for pagination.
	Limit OptInt32 `json:",omitempty,omitzero"`
	// Number of servers to skip before starting to collect the result set. Used for pagination.
	Offset OptInt32 `json:",omitempty,omitzero"`
	// Whether to include offline servers.
	IncludeOffline OptBool `json:",omitempty,omitzero"`
}

func unpackListServerSummariesParams(packed middleware.Parameters) (params ListServerSummariesParams) {
	{
		key := middleware.ParameterKey{
			Name: "multiplayerName",
			In:   "path",
		}
		params.MultiplayerName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "playersOrderAsc",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PlayersOrderAsc = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "includeOffline",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeOffline = v.(OptBool)
		}
	}
	return params
}

func decodeListServerSummariesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListServerSummariesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: multiplayerName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "multiplayerName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MultiplayerName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "multiplayerName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: playersOrderAsc.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "playersOrderAsc",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPlayersOrderAscVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotPlayersOrderAscVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PlayersOrderAsc.SetTo(paramsDotPlayersOrderAscVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playersOrderAsc",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int32(100)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(100)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: includeOffline.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "includeOffline",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeOfflineVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeOfflineVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeOffline.SetTo(paramsDotIncludeOfflineVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "includeOffline",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
